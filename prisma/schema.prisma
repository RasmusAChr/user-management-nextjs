// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

enum Status {
  ACTIVE
  INACTIVE
  BANNED
  SUSPENDED
}

enum SocialLinkType {
  FACEBOOK
  TWITTER
  GITHUB
  LINKEDIN
  INSTAGRAM
  YOUTUBE
  TIKTOK
  OTHER
}

model User {
  id Int @id @default(autoincrement())

  /// Personal Information
  username    String @unique
  email       String @unique
  firstName   String
  lastName    String
  gender      Gender
  phoneNumber String
  country     String
  bio         String
  website     String
  socialLinks SocialLink[]

  /// Media
  userImageURI String?

  /// Tracking
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastSeen  DateTime?
  isOnline  Boolean?
  status    Status    @default(ACTIVE)

  /// Grouping
  groups Group[] @relation("UserGroups")
  teamId Int?
  team   Team?   @relation(fields: [teamId], references: [id])
  roleId Int?
  role   Role?   @relation(fields: [roleId], references: [id])

  /// Authentication & Security
  emailVerified    Boolean @default(false)
  twoFactorEnabled Boolean @default(false)

  lastLogin       DateTime
  lastFailedLogin DateTime?
  loginAttempts   Int       @default(0)
  lockedAt        DateTime?
  locked          Boolean   @default(false)

  passwordHash    String
  passwordChangedAt DateTime
  resetToken        String?
  resetTokenExpiry  DateTime?

  /// Legals
  termsAcceptedAt         DateTime?
  privacyPolicyAcceptedAt DateTime?
  ageConfirmed            Boolean?

}

model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  users       User[]   @relation("UserGroups")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
}

model SocialLink {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [id], references: [id])
  userId Int
  type   SocialLinkType
  url    String
}